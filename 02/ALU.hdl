// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

/**
 * If in[16] is zero we have 0000000000000000
 * If we not that, we get 1111111111111111
 * If we AND together each bit, we should end up with '1' -> true
 * then the number is indeed 0
 * We are basically reducing each bit down to 1, applying AND operation each time against
 * a current bit and an accumulator.
 */

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Apply presets to both 16-bit inputs
        PresetALUInput16(in=x, zin=zx, nin=nx, out=xpreset);
        PresetALUInput16(in=y, zin=zy, nin=ny, out=ypreset);
        // Select the added or 'And' bit-wise results
        And16(a=xpreset, b=ypreset, out=xandySet);
        Add16(a=xpreset, b=ypreset, out=xAddySet);
        Mux16(a=xandySet, b=xAddySet, sel=f, out=fout);
        // Select either out or !out
        Not16(in=fout, out=notFout);
        Mux16(a=fout, b=notFout, sel=no, out=noOut);
        // Assign the zr and ng outputs:
        // if the last (left most) bit is 1, the we are working with a 2s complement
        // value, which signifies the bus represents a negative number in decimal notation
        // so we 'AND' together the bit -> if 1, that operation will produce 1 as ng
        IsNegative16(in=noOut, out=ng);
        // Convert to NOT and then input -> if 000... then we will get 1111...
        // Reducing together each bit in 1111... should produce 1, indicating true that it is 0 
        Not16(in=noOut, out=notNoOut);
        Reduce16(in=notNoOut, out=zr);
        // Produce out
        Add16(a=noOut, b=false, out=out);
}